{"author":"Digix Holdings","title":"Contract to manage DAO funds","fileName":"/contracts/interactive/DaoFundingManager.sol","name":"DaoFundingManager","abi":[{"constant":true,"inputs":[],"name":"resolver","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"currentQuarterIndex","outputs":[{"name":"_quarterIndex","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_address_config","outputs":[{"name":"_config_value","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_bytes_config","outputs":[{"name":"_config_value","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"key","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_key","type":"bytes32"}],"name":"get_contract","outputs":[{"name":"_contract","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_uint_config","outputs":[{"name":"_config_value","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"currentTInQuarter","outputs":[{"name":"_currentT","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32"},{"name":"_index","type":"uint256"}],"name":"claimFunding","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isParticipant","outputs":[{"name":"_is","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_receiver","type":"address"}],"name":"refundCollateral","outputs":[{"name":"_success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_destinationForDaoFunds","type":"address"}],"name":"moveFundsToNewDao","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"isProposalPaused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isModerator","outputs":[{"name":"_is","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_resolver","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"}],"bin":false,"opcodes":false,"source":"pragma solidity ^0.4.24;\n\nimport \"../common/DaoCommon.sol\";\nimport \"./Dao.sol\";\n\n/**\n@title Contract to manage DAO funds\n@author Digix Holdings\n*/\ncontract DaoFundingManager is DaoCommon {\n\n    constructor(address _resolver) public {\n        require(init(CONTRACT_DAO_FUNDING_MANAGER, _resolver));\n    }\n\n    function dao()\n        internal\n        constant\n        returns (Dao _contract)\n    {\n        _contract = Dao(get_contract(CONTRACT_DAO));\n    }\n\n    /**\n    @notice Call function to claim ETH allocated by DAO (transferred to caller)\n    @param _proposalId ID of the proposal\n    @param _index Index of the proposal voting round\n    */\n    function claimFunding(bytes32 _proposalId, uint256 _index)\n        public\n    {\n        require(isFromProposer(_proposalId));\n\n        // proposal should not be paused/stopped\n        require(!isProposalPaused(_proposalId));\n\n        require(!daoStorage().readIfMilestoneFunded(_proposalId, _index));\n        require(daoStorage().readProposalVotingResult(_proposalId, _index));\n        require(daoStorage().isClaimed(_proposalId, _index));\n\n        uint256 _funding;\n        (, _funding) = daoStorage().readProposalMilestone(_proposalId, _index);\n\n        daoFundingStorage().withdrawEth(_funding);\n        daoStorage().setMilestoneFunded(_proposalId, _index);\n\n        msg.sender.transfer(_funding);\n    }\n\n    /**\n    @notice Function to refund the collateral to _receiver\n    @dev Can only be called from the Dao contract\n    @param _receiver The receiver of the funds\n    @return {\n      \"_success\": \"Boolean, true if refund was successful\"\n    }\n    */\n    function refundCollateral(address _receiver)\n        public\n        returns (bool _success)\n    {\n        require(sender_is_from([CONTRACT_DAO, CONTRACT_DAO_VOTING_CLAIMS, EMPTY_BYTES]));\n        refundCollateralInternal(_receiver);\n        _success = true;\n    }\n\n    function refundCollateralInternal(address _receiver)\n        internal\n    {\n        daoFundingStorage().withdrawEth(get_uint_config(CONFIG_PREPROPOSAL_DEPOSIT));\n        _receiver.transfer(get_uint_config(CONFIG_PREPROPOSAL_DEPOSIT));\n    }\n\n    /**\n    @notice Function to move funds to a new DAO\n    @param _destinationForDaoFunds Ethereum contract address of the new DaoFundingManager\n    */\n    function moveFundsToNewDao(address _destinationForDaoFunds)\n        public\n    {\n        require(sender_is(CONTRACT_DAO));\n        uint256 _remainingBalance = address(this).balance;\n        daoFundingStorage().withdrawEth(_remainingBalance);\n        _destinationForDaoFunds.transfer(_remainingBalance);\n    }\n\n    /**\n    @notice Payable function to receive ETH funds from DigixDAO crowdsale contract\n    */\n    function () payable public {\n        daoFundingStorage().addEth(msg.value);\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"resolver","payable":false,"stateMutability":"view","type":"function","signature":"resolver()","signatureHash":"04f3bcec"},{"constant":true,"inputs":[],"name":"currentQuarterIndex","payable":false,"stateMutability":"view","type":"function","signature":"currentQuarterIndex()","signatureHash":"0d7cc561"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_address_config","payable":false,"stateMutability":"view","type":"function","signature":"get_address_config(bytes32)","signatureHash":"19e971eb"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_bytes_config","payable":false,"stateMutability":"view","type":"function","signature":"get_bytes_config(bytes32)","signatureHash":"217f2412"},{"constant":true,"inputs":[],"name":"key","payable":false,"stateMutability":"view","type":"function","signature":"key()","signatureHash":"3943380c"},{"constant":true,"inputs":[{"name":"_key","type":"bytes32","description":"the resolver key to look up"}],"name":"get_contract","outputs":[{"name":"_contract","type":"address","description":"the address of the contract"}],"payable":false,"stateMutability":"view","type":"function","details":"Get the address of a contract","return":"_contract the address of the contract","signature":"get_contract(bytes32)","signatureHash":"3f83acff"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_uint_config","payable":false,"stateMutability":"view","type":"function","signature":"get_uint_config(bytes32)","signatureHash":"46b56321"},{"constant":true,"inputs":[],"name":"currentTInQuarter","payable":false,"stateMutability":"view","type":"function","signature":"currentTInQuarter()","signatureHash":"61645b87"},{"constant":false,"inputs":[{"name":"_proposalId","type":"bytes32","description":"ID of the proposal"},{"name":"_index","type":"uint256","description":"Index of the proposal voting round"}],"name":"claimFunding","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Call function to claim ETH allocated by DAO (transferred to caller)","signature":"claimFunding(bytes32,uint256)","signatureHash":"7bf6b37e"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isParticipant","payable":false,"stateMutability":"view","type":"function","signature":"isParticipant(address)","signatureHash":"929066f5"},{"constant":false,"inputs":[{"name":"_receiver","type":"address","description":"The receiver of the funds"}],"name":"refundCollateral","outputs":[{"name":"_success","type":"bool","description":"Boolean, true if refund was successful"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Can only be called from the Dao contract","return":"{ \"_success\": \"Boolean, true if refund was successful\" }","notice":"Function to refund the collateral to _receiver","signature":"refundCollateral(address)","signatureHash":"a6f15c62"},{"constant":false,"inputs":[{"name":"_destinationForDaoFunds","type":"address","description":"Ethereum contract address of the new DaoFundingManager"}],"name":"moveFundsToNewDao","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Function to move funds to a new DAO","signature":"moveFundsToNewDao(address)","signatureHash":"c72deb9a"},{"constant":true,"inputs":[],"name":"CONTRACT_ADDRESS","payable":false,"stateMutability":"view","type":"function","signature":"CONTRACT_ADDRESS()","signatureHash":"db4ecbc1"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"isProposalPaused","payable":false,"stateMutability":"view","type":"function","signature":"isProposalPaused(bytes32)","signatureHash":"f94f0f33"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isModerator","payable":false,"stateMutability":"view","type":"function","signature":"isModerator(address)","signatureHash":"fa6f3936"},{"inputs":[{"name":"_resolver","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback","inputs":[]}]}
