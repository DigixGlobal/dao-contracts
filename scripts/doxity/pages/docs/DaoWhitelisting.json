{"author":"Digix Holdings","title":"Interactive DAO contract for whitelisting/blacklisting contracts from reading from Storage layer contracts","fileName":"/contracts/interactive/DaoWhitelisting.sol","name":"DaoWhitelisting","abi":[{"constant":true,"inputs":[],"name":"resolver","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"currentQuarterIndex","outputs":[{"name":"_quarterIndex","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_address_config","outputs":[{"name":"_config_value","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_bytes_config","outputs":[{"name":"_config_value","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"key","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_key","type":"bytes32"}],"name":"get_contract","outputs":[{"name":"_contract","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_uint_config","outputs":[{"name":"_config_value","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"currentTInQuarter","outputs":[{"name":"_currentT","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contract","type":"address"},{"name":"_isWhitelisted","type":"bool"}],"name":"setWhitelisted","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isParticipant","outputs":[{"name":"_is","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_ADDRESS","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"isProposalPaused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isModerator","outputs":[{"name":"_is","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_resolver","type":"address"},{"name":"_initialWhitelist","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"bin":false,"opcodes":false,"source":"pragma solidity ^0.4.24;\n\nimport \"../common/DaoConstants.sol\";\nimport \"../common/DaoCommon.sol\";\nimport \"@digix/cacp-contracts-dao/contracts/ResolverClient.sol\";\n\n/**\n@title Interactive DAO contract for whitelisting/blacklisting contracts from reading from Storage layer contracts\n@author Digix Holdings\n*/\ncontract DaoWhitelisting is ResolverClient, DaoConstants, DaoCommon {\n\n    /**\n    @notice Constructor\n    @dev Pass in the DigixDAO interactive contract addresses, that can read votes\n    @param _resolver Address of ContractResolver contract\n    @param _initialWhitelist Array of addresses, initially whitelisted contracts\n    */\n    constructor(address _resolver, address[] _initialWhitelist)\n        public\n    {\n        require(init(CONTRACT_DAO_WHITELISTING, _resolver));\n\n        uint256 _n = _initialWhitelist.length;\n        for (uint256 i = 0; i < _n; i++) {\n            daoWhitelistingStorage().setWhitelisted(_initialWhitelist[i], true);\n        }\n    }\n\n    /**\n    @notice Function to whitelist a contract address (only callable by PRL)\n    @dev Whitelisted contracts can read votes from the DaoStorage contract\n    @param _contract Ethereum address of the deployed contract\n    @param _isWhitelisted Boolean, true if to be whitelisted, false to blacklist\n    */\n    function setWhitelisted(address _contract, bool _isWhitelisted)\n        public\n        if_prl()\n    {\n        daoWhitelistingStorage().setWhitelisted(_contract, _isWhitelisted);\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"resolver","payable":false,"stateMutability":"view","type":"function","signature":"resolver()","signatureHash":"04f3bcec"},{"constant":true,"inputs":[],"name":"currentQuarterIndex","payable":false,"stateMutability":"view","type":"function","signature":"currentQuarterIndex()","signatureHash":"0d7cc561"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_address_config","payable":false,"stateMutability":"view","type":"function","signature":"get_address_config(bytes32)","signatureHash":"19e971eb"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_bytes_config","payable":false,"stateMutability":"view","type":"function","signature":"get_bytes_config(bytes32)","signatureHash":"217f2412"},{"constant":true,"inputs":[],"name":"key","payable":false,"stateMutability":"view","type":"function","signature":"key()","signatureHash":"3943380c"},{"constant":true,"inputs":[{"name":"_key","type":"bytes32","description":"the resolver key to look up"}],"name":"get_contract","outputs":[{"name":"_contract","type":"address","description":"the address of the contract"}],"payable":false,"stateMutability":"view","type":"function","details":"Get the address of a contract","return":"_contract the address of the contract","signature":"get_contract(bytes32)","signatureHash":"3f83acff"},{"constant":true,"inputs":[{"name":"_config_key","type":"bytes32"}],"name":"get_uint_config","payable":false,"stateMutability":"view","type":"function","signature":"get_uint_config(bytes32)","signatureHash":"46b56321"},{"constant":true,"inputs":[],"name":"currentTInQuarter","payable":false,"stateMutability":"view","type":"function","signature":"currentTInQuarter()","signatureHash":"61645b87"},{"constant":false,"inputs":[{"name":"_contract","type":"address","description":"Ethereum address of the deployed contract"},{"name":"_isWhitelisted","type":"bool","description":"Boolean, true if to be whitelisted, false to blacklist"}],"name":"setWhitelisted","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Whitelisted contracts can read votes from the DaoStorage contract","notice":"Function to whitelist a contract address (only callable by PRL)","signature":"setWhitelisted(address,bool)","signatureHash":"9281aa0b"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isParticipant","payable":false,"stateMutability":"view","type":"function","signature":"isParticipant(address)","signatureHash":"929066f5"},{"constant":true,"inputs":[],"name":"CONTRACT_ADDRESS","payable":false,"stateMutability":"view","type":"function","signature":"CONTRACT_ADDRESS()","signatureHash":"db4ecbc1"},{"constant":true,"inputs":[{"name":"_proposalId","type":"bytes32"}],"name":"isProposalPaused","payable":false,"stateMutability":"view","type":"function","signature":"isProposalPaused(bytes32)","signatureHash":"f94f0f33"},{"constant":true,"inputs":[{"name":"_user","type":"address"}],"name":"isModerator","payable":false,"stateMutability":"view","type":"function","signature":"isModerator(address)","signatureHash":"fa6f3936"},{"inputs":[{"name":"_resolver","type":"address"},{"name":"_initialWhitelist","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
